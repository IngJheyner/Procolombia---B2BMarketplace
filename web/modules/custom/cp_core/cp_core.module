<?php

/**
 * @file
 * General Features procolombia catalogo.
 */

use Symfony\Cmf\Component\Routing\RouteObjectInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\cp_core\Controller\CpCoreController;
use Drupal\cp_search\Controller\CpSearchController;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\redirect\Entity\Redirect;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Serialization\Json;

/**
 * Implements hook_mail().
 */
function cp_core_mail($key, &$message, $params) {
  // Test.
  $options = [
    'langcode' => $message['langcode'],
  ];
  if (empty($params['no_html'])) {
    $message['headers']['MIME-Version'] = '1.0';
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  }
  $message['from'] = isset($params['from']) ? $params['from'] : \Drupal::config('system.site')->get('mail');
  $message['subject'] = $params['title'];
  $message['body'][] = $params['message'];

  if (!empty($params['override_from'])) {
    $email = $message['from'];
    $message['reply-to'] = $email;
    $message['Return-Path'] = $email;
    $message['headers']['Return-Path'] = $email;
    $message['headers']['Sender'] = $email;
    $message['headers']['Reply-to'] = $email;
    $message['headers']['From'] = $email;

  }

}

/**
 * Implements hook_mail_alter().
 */
function cp_core_mail_alter(&$message) {
  $override_keys = [
    'register_no_approval_required',
    'status_activated',
  ];
  if (in_array($message['key'], $override_keys)) {
    $config = \Drupal::config('cp_core.notifications');
    $email = $config->get('notifications_email');
    if ($email) {
      $message['from'] = $email;
      $message['reply-to'] = $email;
      $message['Return-Path'] = $email;
      $message['headers']['Return-Path'] = $email;
      $message['headers']['Sender'] = $email;
      $message['headers']['Reply-to'] = $email;
      $message['headers']['From'] = $email;
    }
  }
}

/**
 * Implements hook_user_login().
 */
function cp_core_user_login($account) {
  $cpCoreController = new CpCoreController();
  $currentUserRoles = $account->getRoles();
  $is_exporter = $is_buyer = FALSE;
  $path_redirect = $cpCoreController->get_dashboard_path_by_user_role();

  if (in_array("exportador", $currentUserRoles)) {
    $is_exporter = TRUE;
  }
  elseif (in_array("buyer", $currentUserRoles)) {
    $is_buyer = TRUE;
  }

  // First login - Redirect change password.
  if ($is_exporter && !$account->getLastAccessedTime() && $account->id() < 8828) {
    user_cookie_save(['first_login' => TRUE]);
    $path_redirect = "/user/" . $account->id() . "/change-password";
  }

  // Redirect.
  if ($is_exporter or $is_buyer) {
    $response = new RedirectResponse($path_redirect);
    $request = \Drupal::request();
    $request->getSession()->save();
    $response->prepare($request);
    \Drupal::service('kernel')->terminate($request, $response);
    $response->send();
  }
}

/**
 * Implements hook_theme().
 */
function cp_core_theme($existing, $type, $theme, $path) {
  return [
    'dsb_company_info' => [
      'variables' => [
        'nid_company' => NULL,
        'img_add_company' => NULL,
        'name_company' => NULL,
        'nit' => NULL,
        'label_state' => NULL,
        'bool_publish' => NULL,
      ],
      'template' => 'dsb_company_info',
    ],
    'dsb_add_product' => [
      'variables' => [
        'img_add_product' => NULL,
      ],
      'template' => 'dsb_add_product',
    ],
    'hello_user' => [
      'variables' => [
        'name_user' => NULL,
        'img_ico' => NULL,
        'url_logout' => NULL,
        'path_dsbd' => NULL,
      ],
      'template' => 'hello_user',
    ],
    'dsb_info_user' => [
      'variables' => [
        'name_user' => NULL,
        'mail_user' => NULL,
        'img_user' => NULL,
        'company_name' => NULL,
        'company_nit' => NULL,
        'company' => NULL,
        'country' => NULL,
        'first_login' => NULL,
      ],
      'template' => 'dsb_info_user',
    ],
    'pre_register' => [
      'variables' => [
        'urls' => NULL,
      ],
      'template' => 'pre_register',
    ],
    'cp_core_node_multistep_header' => [
      'variables' => [],
    ],
    'edit_product_header' => [
      'variables' => [
        'uid' => NULL,
        'account_name' => NULL,
      ],
    ],
    'cp_core_node_multistep_sidebar' => [
      'variables' => [
        'steps' => [ ],
        'current' => NULL
      ],
    ],
    'cp_core_node_multistep_legal_modal' => [
      'variables' => [],
    ],
    'cp_core_node_multistep_generic_modal' => [
      'render element' => 'form',
      'variables' => [
        'class' => NULL,
        'autoload' => FALSE,
        'title' => NULL,
        'message' => NULL,
        'question' => NULL,
        'button_text' => NULL,
        'button_link' => NULL,
        'button_no_text' => NULL,
        'button_no_link' => NULL,
      ],
    ],
    'cp_core_file_widget_multiple' => [
      'render element' => 'element',
      'file' => 'cp_core.field.inc',
    ],
  ];
}

/**
 * Implements hook_entity_presave().
 */
function cp_core_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'product':
      // Save dependence state in Bulk operations
      // The dependence state is used by company for publish - unpublish products.
      $curr_url = Url::fromRoute('<current>');
      $curr_uri = ltrim($curr_url->toString(), '/');
      if ($curr_uri) {
        $arr_uri = explode('/', $curr_uri);
        if (!empty($arr_uri) && $arr_uri[1] == 'batch') {
          if (!empty($entity->get('field_states')->getValue())) {
            $state = $entity->get('field_states')->getValue()[0]['value'];
            $bool_depend_state = ($state == 'approved') ? TRUE : FALSE;
            $entity->field_dependent_state->value = $bool_depend_state;
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_entity_update().
 */
function cp_core_entity_update(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'product':

      // *************************
      // *** Update field sector
      // *** (Change by exporter user or asessor user)
      // *************************
      if (!empty($entity->get('field_categorization')->getValue()[0]['target_id'])) {
        $tidChild = $entity->get('field_categorization')->getValue()[0]['target_id'];
        $parent = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($tidChild);
        if (!empty($parent)) {
          $parent = reset($parent);
          $tidParent = $parent->id();
          if (!empty($tidParent) && is_numeric($tidParent)) {
            $entity->field_categorization_parent->target_id = $tidParent;
          }
        }
      }

      // *************************
      // *** Bulk operations
      // *** Mail Notifications
      // *************************
      $curr_url = Url::fromRoute('<current>');
      $curr_uri = ltrim($curr_url->toString(), '/');
      if ($curr_uri) {
        $arr_uri = explode('/', $curr_uri);
        if (!empty($arr_uri) && $arr_uri[1] == 'batch' && !isset($_SESSION["not_bulk_mails_products"])) {

          if (!empty($entity->get('field_states')->getValue())) {
            $state = $entity->get('field_states')->getValue()[0]['value'];
            $cpCoreController = new CpCoreController();
            $lang = $entity->language();
            $langId = $lang->getId();
            $exporter_mail = NULL;
            if ($entity->getOwnerId()) {
              $usrOwn = User::load($entity->getOwnerId());
              $exporter_mail = $usrOwn->getEmail();
            }

            $prod_name = NULL;
            if (!empty($entity->get('title')->getValue())) {
              $prod_name = $entity->get('title')->getValue()[0]['value'];
            }

            $label_state = $cpCoreController->get_label_by_state($state);
            $label_lang = ($langId == 'en') ? 'Inglés' : 'Español';

            $key = ($state == 'approved') ? 'product_edit_enabled' : 'product_chg_state';
            $prmsts = [
              'key' => $key,
              'prod_name' => $prod_name,
              'new_state' => $label_state,
              'label_lang' => $label_lang,
            ];
            // Exporter.
            if (!empty($exporter_mail)) {
              $prmsts['user_type'] = 'exporter';
              $prmsts['exporter_mail'] = $exporter_mail;
              $info = $cpCoreController->_cp_core_get_body_and_subject_mail($prmsts);
              $cpCoreController->_cp_core_send_mail($exporter_mail, $key, $info['body'], $info['subject']);
            }
          }

        }
      }
      break;

    case 'company':

      // *************************
      // *** Bulk operations
      // *** Mail Notifications
      // *************************
      $curr_url = Url::fromRoute('<current>');
      $curr_uri = ltrim($curr_url->toString(), '/');
      if ($curr_uri) {
        $arr_uri = explode('/', $curr_uri);
        if (!empty($arr_uri) && $arr_uri[1] == 'batch') {
          $cpCoreController = new CpCoreController();
          $lang = $entity->language();
          $langId = $lang->getId();
          if (!empty($entity->get('field_states')->getValue())) {
            $state = $entity->get('field_states')->getValue()[0]['value'];
          }
          $oppLangId = ($langId == 'es') ? 'en' : 'es';
          if ($entity->hasTranslation($oppLangId)) {
            $entityOpp = $entity->getTranslation($oppLangId);
            if (!empty($entityOpp->get('field_states')->getValue())) {
              $oppState = $entityOpp->get('field_states')->getValue()[0]['value'];
            }
          }

          if (isset($state, $oppState) && $state != $oppState) {
            $exporter_mail = NULL;
            if ($entity->getOwnerId()) {
              $usrOwn = User::load($entity->getOwnerId());
              $exporter_mail = $usrOwn->getEmail();
            }
            $label_state = $cpCoreController->get_label_by_state($state);

            $company_name = NULL;
            if (!empty($entity->get('title')->getValue())) {
              $company_name = $entity->get('title')->getValue()[0]['value'];
            }

            // Active - inactive products.
            $_SESSION["not_bulk_mails_products"] = TRUE;
            if ($state == 'approved') {
              $cpCoreController->publish_products_by_company_nid($entity->id());
            }
            else {
              $cpCoreController->unpublish_products_by_company_nid($entity->id());
            }

            $key = ($state == 'approved') ? 'company_edit_enabled' : 'company_chg_state';
            $prmsts = [
              'key' => $key,
              'company_name' => $company_name,
              'new_state' => $label_state,
            ];

            // Exporter.
            if (!empty($exporter_mail)) {
              $prmsts['user_type'] = 'exporter';
              $prmsts['exporter_mail'] = $exporter_mail;
              $info = $cpCoreController->_cp_core_get_body_and_subject_mail($prmsts);
              $cpCoreController->_cp_core_send_mail(
                $exporter_mail,
                $key,
                $info['body'],
                $info['subject']
              );
            }
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function cp_core_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  if ($breadcrumb && !\Drupal::service('router.admin_context')->isAdminRoute()) {
    $node = \Drupal::request()->get('node');
    $types = ['company', 'product'];
    $request = \Drupal::request();

    if ($node && in_array($node->bundle(), $types)) {
      $current_uri = \Drupal::request()->getRequestUri();
      $current_uri = substr($current_uri, 1);
      $arr_uri = explode('/', $current_uri);
      $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $breadcrumb = new Breadcrumb();
      $breadcrumb->addLink(Link::createFromRoute(t('Home'), '<front>'));
      switch ($node->bundle()) {
        case 'company':
          $breadcrumb->addLink(Link::fromTextAndUrl(t('Company'), Url::fromUri('internal:/' . $lang . '/ecommerce-crossborder')));
          if (count($arr_uri) == 3) {
            $tid = $node->get('field_product_categories_list')->getValue()[0]['target_id'];
            $sector = Term::load(intval($tid));
            if (!empty($sector)) {
              $breadcrumb->addLink(Link::createFromRoute($sector->getName(), '<nolink>'));
            }
          }
          // $breadcrumb->addLink(Link::createFromRoute($node->getTitle(), '<nolink>'));
          $breadcrumb->addCacheTags(['node:' . $node->id()]);
          break;

        case 'product':
          if (count($arr_uri) == 4) {
            // Sector and subsector.
            for ($i = 1; $i < 3; $i++) {

              $tid = NULL;
              $field = ($i == 1) ? 'field_categorization_parent' : 'field_categorization';
              if (!empty($node->get($field)->getValue()[0])) {
                $tid = $node->get($field)->getValue()[0]['target_id'];
              }

              $cat = NULL;
              if (is_numeric($tid)) {
                $cat = Term::load(intval($tid));
              }
              if (!empty($cat)) {
                $uri_base = ($lang == 'es') ? '/productos' : '/products';
                $uri = NULL;
                if ($lang == 'es' && $cat->hasTranslation('es')) {
                  $cat = $cat->getTranslation('es');
                }

                if ($lang == 'en' && $cat->hasTranslation('en')) {
                  $cat = $cat->getTranslation('en');
                }

                if (!empty($cat->get('field_uri_search')->getValue())) {
                  $search_uri = $cat->get('field_uri_search')->getValue()[0]['value'];
                  // Sector.
                  if ($i == 1) {
                    $uri = $uri_parent = $uri_base . '/' . $search_uri;
                  }
                  // Subsector.
                  elseif ($i == 2) {
                    $uri = $uri_parent . '/' . $search_uri;
                  }
                }
                if (!empty($uri)) {
                  $link = Link::fromTextAndUrl($cat->getName(), Url::fromUri('internal:' . $uri));
                  $breadcrumb->addLink($link);
                }
              }
            }
          }
          // $breadcrumb->addLink(Link::createFromRoute($node->getTitle(), '<nolink>'));
          $breadcrumb->addCacheTags(['node:' . $node->id()]);
          break;
      }
    }

    // Edit company.
    if ($route_match->getRouteName() == 'cp_core.editCompany' || $route_match->getRouteName() == 'cp_core.EditarEmpresa') {
      $breadcrumb = new Breadcrumb();
      $breadcrumb->addLink(Link::createFromRoute(t('Home'), '<front>'));
      $breadcrumb->addLink(Link::fromTextAndUrl(t('Dashboard'), Url::fromUri('internal:/dashboard')));
      $breadcrumb->addLink(Link::createFromRoute(t('Edit company'), '<nolink>'));
    }

    // Edit product.
    if ($route_match->getRouteName() == 'cp_core.editProduct') {
      $breadcrumb = new Breadcrumb();
      $breadcrumb->addLink(Link::createFromRoute(t('Home'), '<front>'));
      $breadcrumb->addLink(Link::fromTextAndUrl(t('Dashboard'), Url::fromUri('internal:/dashboard')));
      $breadcrumb->addLink(Link::createFromRoute(t('Edit product'), '<nolink>'));
    }
  }
}

/**
 * Implements hook_views_pre_view()
 */
function cp_core_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  $current_user = \Drupal::currentUser();
  $current_user_roles = $current_user->getRoles();

  $is_admin = in_array('administrator', $current_user_roles);
  $is_asesor_administrativo_ntc = in_array('asesor_administrativo_ntc', $current_user_roles);
  $is_asesor_administrativo = in_array('asesor_administrativo', $current_user_roles);

  switch ($view->id()) {
    // Semaphore companies.
    case 'flujo_de_estados_empresas':
      // Context #0.
      if ($is_admin || $is_asesor_administrativo_ntc) {
        // Can view all.
        $args[0] = '1';
      }
      elseif ($is_asesor_administrativo) {
        // Limit to categories in their profile.
        $args[0] = $current_user->id();
      }
      break;

    // Semaphore products.
    case 'flujo_de_estados_productos':
      // Context #1.
      if ($is_admin || $is_asesor_administrativo_ntc) {
        // Can view all.
        $args[1] = 'all';
      }
      elseif ($is_asesor_administrativo) {
        // Limit to categories in their profile.
        $args[1] = $current_user->id();
      }
      break;

    // First login message.
    case 'dashboard_user':
      if (!empty($_COOKIE['Drupal_visitor_first_login'])) {
        $messenger = \Drupal::messenger();
        $messenger->addMessage(
          t("This is your first login. It's mandatory to change the password!"),
          $messenger::TYPE_WARNING,
          TRUE
        );
      }
      break;
  }

}

/**
 * Implements hook_FORM_ID_form_alter().
 */
function cp_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (str_contains($form['#id'], "views-exposed-form-buscador-b2b-mp-2021")) {
    $form['tariff']['#maxlength'] = 1024;
    $form['tariff']['#attributes']['placeholder'] = t("# tariff item");
  }
  if (
    $form['#id'] == 'views-exposed-form-search-companies-block-1' ||
    $form['#id'] == 'views-exposed-form-search-companies-block-2' ||
    $form['#id'] == 'views-exposed-form-specialized-offer-search-companies-block-1'
  ) {
    $options = $form['field_categorization']['#options'];
    $options['All'] = t('- Category -');
    // Get all terms lvl 1 Categorization taxonomy.
    $ancestors = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term")->loadTree(
    // This is your taxonomy term vocabulary (machine name).
      'categorization',
    // This is "tid" of parent. Set "0" to get all.
      0,
    // Get only 1st level.
      1,
    // Get full load of taxonomy term entity.
      FALSE
    );

    // Get all tids for ancestors.
    $list_tids_ancestors = [];
    foreach ($ancestors as $term) {
      $list_tids_ancestors[] = (int) $term->tid;
    }
    // Clean options.
    $items_removed = [];
    foreach ($options as $index => $option) {
      $attributes = ['class' => 'first'];
      $opt = $option->option;
      if (isset($opt) && count($opt) > 0) {
        foreach ($opt as $tid => $term) {
          if (!in_array($tid, $list_tids_ancestors)) {
            // Remove term in otions list.
            $items_removed[] = $options[$index];
            unset($options[$index]);
          }
        }
      }
    }

    $filtersMobile = '<div class="is-mobile">';
    $filtersMobile .= '<span class="show-filter">';
    $filtersMobile .= t('filter by') . '</span>';
    $filtersMobile .= '<span class="view-mode cols-1">' . t('to show');
    $filtersMobile .= '</span></div>';

    $form['is_mobile'] = [
      '#markup' => $filtersMobile,
      '#weight' => -11,
    ];

    // $list_sector = '<div class="form-item-sector"><span>' . t('Category') . '</span>';
    $list_sector = '<div class="form-item-sector">';
    $list_sector .= '<select id="search-list-sector" class="search-list-sector">';
    $inx = 0;
    $cpSearch = new CpSearchController();
    $parents = $cpSearch->_cp_search_get_categories_leve1();
    if (!empty($parents)) {
      $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $url_search = $cpSearch->_cp_search_get_url_search();
      $str_opt_dflt = t('- Category -');
      $opt_dflt = [$str_opt_dflt];
      $opts_img_icons = [];
      if (isset($parents['icons_uris'])) {
        $dflt_ico_option = [['name' => $str_opt_dflt]];
        $opts_img_icons = $dflt_ico_option + $parents['icons_uris'];
      }
      foreach ($opts_img_icons as $tid => $values) {
        $tid_dflt_cat = isset($tid_dflt_cat) ? $tid_dflt_cat : 0;
        $class = $tid_dflt_cat == $tid ? "sector" : "sector";
        $selected = ($tid_dflt_cat == $tid ? ' selected="selected" ' : NULL);
        $list_sector .= '<option class="' . $class . '" lang="' . $lang . '"' . $selected;
        $list_sector .= ' value=' . $tid;
        if (isset($values['ico'])) {
          $list_sector .= ' data-imagesrc="' . $values['ico'] . '"';
        }
        $list_sector .= '>';
        $list_sector .= $values['name'];
        $list_sector .= '</option>';
        $inx++;
      }
      $list_sector .= '</select></div>';
      $list_sector .= '<small class="description text-muted">' . t('Ex: Agricultural') . '</small>';

      $form['field_list_sector'] = [
        '#prefix' => '<div class="row justify-content-center w-100"><div class="list-sector-company">',
        '#suffix' => '</div>',
        '#markup' => $list_sector,
        '#weight' => -10,
        '#allowed_tags' => ['select', 'option', 'small'],
      ];
    }

    $form['title_company_search']['#title_display']         = 'invisible';
    $form['title_company_search']['#placeholder']           = t("Company");
    $form['title_product_search']['#title_display']         = 'invisible';
    $form['title_product_search']['#placeholder']           = t("Product");
    $form['title_product_search']['#suffix']                = '</div>';
    $form['field_categorization']['#title_display']         = 'invisible';
    $form['#attached']['library'][]                         = 'cp_search/cp_search';
    $form['#attached']['library'][]                         = 'cp_core/cp_core_select_company';
    $form['field_categorization']['#attributes']['class'][] = 'd-none';
    $form['field_categorization']['#options']               = $options;

    $form['#attributes']['class'][] = 'filter-search-companies';
    $form['actions']['#attributes']['class'][] = 'col-md-12';
    $form['actions']['#attributes']['class'][] = 'w-100';
    $form['actions']['submit']['#attributes']['class'][] = 'btn-submit';
    $form['actions']['reset']['#attributes']['class'][] = 'btn-reset';
  }

  $view = $form_state->get('view');
  if ($view->id() == 'product_dashboard' && $view->current_display == 'page_1') {
    if (isset($form['items_per_page'])) {
      $form['items_per_page']['#weight'] = 99;
      $form['actions']['#weight'] = 98;
      foreach ($form['items_per_page']['#options'] as &$item) {
        $item = t('@num items', ['@num' => $item]);
      }
    }
  }

  $viewId = [
    'dashboard_advisor',
    'products_advisor'
  ];

  $displayId = [
    'dashboard_table',
    'dashboard_table_product'
  ];

  if (in_array($view->id(), $viewId) && in_array($view->current_display, $displayId)) {
    if (isset($form['items_per_page'])) {
      $form['items_per_page']['#weight'] = 99;
      $form['actions']['#weight'] = 98;
      foreach ($form['items_per_page']['#options'] as &$item) {
        $item = t('@num results', ['@num' => $item]);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function cp_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
      $form['name']['#title'] = t('Email or NIT');
      break;

    case 'cp_core_multistep_form':
      $originalTitle = $form['field_pr_terms_of_condition']['widget']['value']['#title'];
      $terms = '<a href="https://b2bmarketplace.procolombia.co/es/habeas-data-aviso-de-privacidad" target="_BLANK">' . $originalTitle . '</a>';
      $form['field_pr_terms_of_condition']['widget']['value']['#title'] = $terms;
      break;

    case 'node_company_edit_form':
      // Field hide.
      $val_old_state = NULL;
      if (isset($form['field_states']['widget']['#default_value'])) {
        $val_old_state = $form['field_states']['widget']['#default_value'][0];
      }
      $form['hd_old_state'] = [
        '#type' => 'hidden',
        '#value' => $val_old_state,
      ];

      $form['status']['#access'] = FALSE;
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'cp_core_states_company_submit';
        }
      }
      break;

    case 'node_product_edit_form':
      $node = \Drupal::request()->get('node');
      $usrOwn = User::load($node->getOwnerId());
      $userAccountName = $usrOwn->getAccountName();

      $form['header'] = [
        '#theme' => 'edit_product_header',
        '#uid' => $node->getOwnerId(),
        '#account_name' => $userAccountName,
        '#weight' => -99,
      ];

      // Field hide.
      if (isset($form['field_states']['widget']['#default_value'])) {
        $val_old_state = $form['field_states']['widget']['#default_value'][0];
      }
      $form['hd_old_state'] = [
        '#type' => 'hidden',
        '#value' => $val_old_state,
      ];
      $form['field_dependent_state']['#access'] = FALSE;
      $form['status']['#access'] = FALSE;
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          // Disabled because it depends on company field that not exists.
          // $form['actions'][$action]['#submit'][] = 'cp_core_states_product_submit';
        }
      }
      break;

    case 'node_old_company_edit_form':
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'cp_core_redirect_301_old_company_submit';
        }
      }
      break;

    case 'views_bulk_operations_configure_action':
      // Bulk product operations 'flujo_de_estados_productos'.
      $arr_uri = explode('/', \Drupal::request()->getUri());
      if (!empty($arr_uri) && isset($arr_uri[6]) && $arr_uri[6] == 'flujo_de_estados_productos') {
        unset($_SESSION["not_bulk_mails_products"]);
      }
      break;

    case 'change_pwd_form':
      $account = \Drupal::currentUser();
      $currentUserRoles = $account->getRoles();
      $description = 'Su contrase&ntilde;a actual es <b>procolombia2019</b>';

      $form['account']['current_pass']['#description'] = in_array("exportador", $currentUserRoles) ? $description : '';
      $form['#submit'][] = 'delete_cookie_password_submit';
      break;

    case 'entity_browser_paises_form':
      // Add cancel button to paises browser.
      $form['actions']['cancel'] = [
        '#type' => 'html_tag',
        '#tag' => 'a',
        '#value' => t('Cancel'),
        '#attributes' => [
          'class' => ['entity-browser-paises-close', 'button', 'btn'],
          'href' => '#',
        ],
        '#weight' => -99,
      ];

      $form['#attached']['library'][] = 'cp_core/cp_core_countries_list';
  }
  $form['#attached']['library'][] = 'webform/webform';
}

/**
 * Function to changes states and publish-unpublish company.
 *
 * @param array $form
 * @param Drupal\Core\Form\FormStateInterface $form_state
 */
function delete_cookie_password_submit(array $form, FormStateInterface $form_state) {
  user_cookie_delete('first_login');
  $response = new RedirectResponse("/dashboard");
  $request = \Drupal::request();
  $request->getSession()->save();
  $response->prepare($request);
  \Drupal::service('kernel')->terminate($request, $response);
  $response->send();
}

/**
 * Function to changes states and publish-unpublish company.
 *
 * @param array $form
 * @param Drupal\Core\Form\FormStateInterface $form_state
 */
function cp_core_states_company_submit(array $form, FormStateInterface $form_state) {
  $company = $form_state->getFormObject()->getEntity();
  $uidOwn = $company->getOwnerId();

  if (!empty($form_state->getValue('field_states')) && !empty($company)) {
    $cpCoreController = new CpCoreController();
    $state = $form_state->getValue('field_states')[0]['value'];

    $old_state = NULL;
    if (!empty($form_state->getValue('hd_old_state'))) {
      $old_state = $form_state->getValue('hd_old_state');
    }

    if (!empty($old_state) && $old_state != $state && $uidOwn) {
      $company_name = NULL;
      if (!empty($form_state->getValue('title')[0])) {
        $company_name = $form_state->getValue('title')[0]['value'];
      }

      $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $publish = $state == 'approved' ? TRUE : FALSE;
      $company->setPublished($publish);
      if ($publish) {
        $cpCoreController->publish_products_by_company_nid($company->id());
      }
      else {
        $cpCoreController->unpublish_products_by_company_nid($company->id());
      }
      switch ($lang) {
        case 'es':
          $company->save();
          $compEn = $company->getTranslation('en');
          $compEn->field_states->value = $state;
          $compEn->setPublished($publish);
          $compEn->save();
          break;

        case 'en':
          $compSp = $company->getTranslation('es');
          $compSp->field_states->value = $state;
          $compSp->setPublished($publish);
          $compSp->save();
          break;
      }

      // Mail Notifications.
      $usrOwn = User::load($uidOwn);
      $exporter_mail = $usrOwn->getEmail();

      $label_state = NULL;
      $label_state = $cpCoreController->get_label_by_state($state);

      $key = ($state == 'approved') ? 'company_edit_enabled' : 'company_chg_state';
      $prmsts = [
        'key' => $key,
        'company_name' => $company_name,
        'new_state' => $label_state,
      ];

      // Exporter.
      if (!empty($exporter_mail)) {
        $prmsts['user_type'] = 'exporter';
        $prmsts['exporter_mail'] = $exporter_mail;
        $info = $cpCoreController->_cp_core_get_body_and_subject_mail($prmsts);
        $cpCoreController->_cp_core_send_mail($exporter_mail, $key, $info['body'], $info['subject']);
      }
    }
  }
}

/**
 * Function to changes states and publish-unpublish product.
 *
 * @param array $form
 * @param Drupal\Core\Form\FormStateInterface $form_state
 */
function cp_core_states_product_submit(array $form, FormStateInterface $form_state) {

  $product = $form_state->getFormObject()->getEntity();
  $uidOwn = $product->getOwnerId();
  $nidCompany = $form_state->getValue('field_pr_ref_company')[0]['target_id'];
  $companyLoad = Node::load($nidCompany);

  if (!empty($form_state->getValue('field_states')) && !empty($product)) {
    $state = $form_state->getValue('field_states')[0]['value'];
    $old_state = NULL;
    if (!empty($form_state->getValue('hd_old_state'))) {
      $old_state = $form_state->getValue('hd_old_state');
    }

    if (!empty($old_state) && $old_state != $state && $uidOwn) {
      $prod_name = NULL;
      if (!empty($form_state->getValue('title')[0])) {
        $prod_name = $form_state->getValue('title')[0]['value'];
      }
      $cpCoreController = new CpCoreController();
      $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $publish = $state == 'approved' ? TRUE : FALSE;
      $product->setPublished($publish);
      if (!empty($companyLoad) && !$companyLoad->isPublished()) {
        $product->setPublished($companyLoad->isPublished());
      }
      $product->field_dependent_state->value = $publish;
      $product->save();

      // Mail Notifications.
      $usrOwn = User::load($uidOwn);
      $exporter_mail = $usrOwn->getEmail();
      $label_lang = ($lang == 'en') ? 'Inglés' : 'Español';

      $label_state = NULL;
      $label_state = $cpCoreController->get_label_by_state($state);

      $key = ($state == 'approved') ? 'product_edit_enabled' : 'product_chg_state';
      $prmsts = [
        'key' => $key,
        'prod_name' => $prod_name,
        'new_state' => $label_state,
        'label_lang' => $label_lang,
      ];
      // Exporter.
      if (!empty($exporter_mail)) {
        $prmsts['user_type'] = 'exporter';
        $prmsts['exporter_mail'] = $exporter_mail;
        $info = $cpCoreController->_cp_core_get_body_and_subject_mail($prmsts);
        $cpCoreController->_cp_core_send_mail($exporter_mail, $key, $info['body'], $info['subject']);
      }
    }
  }
}

/**
 * Function to add redirect 301 to company.
 *
 * @param array $form
 * @param Drupal\Core\Form\FormStateInterface $form_state
 */
function cp_core_redirect_301_old_company_submit(array $form, FormStateInterface $form_state) {
  if (!empty($form_state->getValue('field_redirect_301_company')[0]['target_id'])) {

    $nidToRedirect = $form_state->getValue('field_redirect_301_company')[0]['target_id'];
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $source_uri = $form_state->getValue('field_previous_uri')[0]['value'];
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nidToRedirect, $lang);
    $redirect_uri = 'internal:' . $alias;
    $module_handler = \Drupal::service('module_handler');
    $bool_module_redirect = $module_handler->moduleExists('redirect');

    if ($bool_module_redirect && !empty($source_uri) && !empty($redirect_uri) && !empty($lang)) {
      $cpCoreController = new CpCoreController();
      $check_redirect = $cpCoreController->get_redirect_register_301(
        $source_uri,
        $redirect_uri,
        $lang
      );

      if (empty($check_redirect)) {
        $check_source = $cpCoreController->get_redirect_registers_301_by_source($source_uri, $lang);
        if (!empty($check_source)) {
          $redirect = redirect_repository()->load($check_source['rid']);
          $redirect->delete();
        }
        Redirect::create([
          'redirect_source' => $source_uri,
          'redirect_redirect' => $redirect_uri,
          'status_code' => 301,
          'language' => $lang,
        ])->save();
      }
    }
  }
}

/**
 * Alter query view to show the categories selected by the user.
 *
 * @return void
 */
function cp_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() === 'flujo_de_estados_productos') {
    // kint($query);
  }
  if ($view->id() === 'buyer_view_products') {
    $cpController = new CpCoreController();
    $category_list = $cpController->buyerCategories();

    $query->where[1]['conditions'][2]['field'] = "node__field_categorization_parent.field_categorization_parent_target_id";
    $query->where[1]['conditions'][2]['value'] = $category_list['categories'];
    $query->where[1]['conditions'][2]['operator'] = "in";

    if (count($category_list['subcategories']) > 0) {
      $query->where[1]['conditions'][3]['field'] = "node__field_categorization.field_categorization_target_id";
      $query->where[1]['conditions'][3]['value'] = $category_list['subcategories'];
      $query->where[1]['conditions'][3]['operator'] = "in";
    }
    else {
      unset($query->where[1]['conditions'][3]);
    }
  }
  // if ($view->id() === 'product_dashboard') {
  //   foreach ($query->where[1]['conditions'] as &$condition) {
  //     if (strpos($condition['field'], 'node_field_data.changed') === 0) {
  //       $exp = explode(' >= ', $condition['field']);
  //       $expend = $exp[1] + 86400;
  //       $condition['field'] .= " AND node_field_data.changed <=" . $expend;
  //     }
  //   }
  //   $hola = 1;
  // }
}

/**
 * Implements hook_page_attachments().
 */
function cp_core_page_attachments(array &$page) {
  $current_path = \Drupal::service('path.current')->getPath();

  if (strpos($current_path, 'productos') !== FALSE || strpos($current_path, 'products')) {
    $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $endmetadescription = '';
    switch ($language) {
      case 'es':
        $keywords = explode("productos/", $current_path);
        $metadescription = t("Encuentre aquí");
        $endmetadescription = t(". ProColombia es una entidad que promueve la internacionalización de empresas colombianas.");
        break;

      case 'en':
        $keywords = explode("products/", $current_path);
        $metadescription = t("Find here");
        $endmetadescription = t("ProColombia is an entity that promotes the Internationalization of Colombian companies.");
        break;
    }

    $metatag = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'description',
      ],
    ];

    $keywords = str_replace('/', ',', $keywords);
    if (!empty($keywords) && isset($keywords[TRUE])) {
      $metatag['#attributes']['content'] = $metadescription . ' ' . $keywords[TRUE] . ' ' . $endmetadescription;
    }

    $metadescription = '';
    $title = '';
    $tid = NULL;
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $request = \Drupal::request();
    if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
      $title = \Drupal::service('title_resolver')->getTitle($request, $route);
    }

    if (isset($title) && !empty($title)) {
      $CpSearchController = new CpSearchController();
      $tid = $CpSearchController->_cp_search_get_taxonomy_tid_by_name($title, 'categorization');
      if (isset($tid) && is_numeric($tid)) {
        $term_cat = Term::load(intval($tid));
        if (isset($term_cat) && !empty($term_cat)) {
          if ($term_cat->hasTranslation($lang)) {
            $term_cat = $term_cat->getTranslation($lang);
          }
          $metadescription = $term_cat->get('field_metadescription')->value;
        }
      }
    }

    if (isset($metadescription) && !empty($metadescription)) {
      $metatag['#attributes']['content'] = $metadescription;
    }

    $page['#attached']['html_head'][] = [$metatag, 'keywords'];
  }
}


/**
 * Implements hook_entity_extra_field_info().
 */
function cp_core_entity_extra_field_info() {
  $extra = [];
  $extra['node']['product']['display']['cp_core_title_h2_no_link'] = [
    'label' => t('CP Core: Title h2 no link'),
    'description' => t('Shows the title of the node'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['product']['display']['cp_core_presave_preview'] = [
    'label' => t('CP Core: Presave preview'),
    'description' => t('Enables a preview link.'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['product']['display']['cp_core_close_modal'] = [
    'label' => t('CP Core: Close Modal'),
    'description' => t('Show the close link.'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['product']['display']['cp_core_edit_product'] = [
    'label' => t('CP Core: Edit product'),
    'description' => t('Edit product'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  $extra['node']['product']['display']['cp_core_generate_contact'] = [
    'label' => t('CP Core: Generar contacto'),
    'description' => t('Generate a contact link for the product'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function cp_core_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('cp_core_presave_preview')) {
    $build['cp_core_presave_preview'] = [
      '#type' => 'link',
      '#url' => Url::fromRoute('view.product_service_presave_preview.page_1', ['arg_0' => $entity->id()]),
      '#title' => t('Preview'),
      '#attributes' => [
        'class' => ['use-ajax'],
        'data-dialog-type' => 'modal',
        'data-dialog-options' => Json::encode(['width' => '90%']),
      ],
      '#attached' => ['library' => 'core/drupal.dialog.ajax'],
    ];
  }
  if ($display->getComponent('cp_core_title_h2_no_link')) {
    $build['cp_core_title_h2_no_link'] = [
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => $entity->label(),
    ];
  }

  if ($display->getComponent('cp_core_close_modal')) {
    $build['cp_core_close_modal'] = [
      '#type' => 'html_tag',
      '#tag' => 'button',
      '#value' => t('Go back to process'),
      '#attributes' => ['class' => ['close']],
    ];
  }

  if ($display->getComponent('cp_core_edit_product')) {
    $url = Url::fromRoute('cp_core.edit_product_multistep', ['nid' => $entity->id()]);
    if ($url->access()) {
      $build['cp_core_edit_product'] = [
        '#type' => 'link',
        '#url' => Url::fromRoute('cp_core.edit_product_multistep', ['nid' => $entity->id()]),
        '#title' => t('Edit'),
      ];
    }
  }

  if ($display->getComponent('cp_core_generate_contact')) {
    $user = \Drupal::currentUser();
    $userRoles = $user->getRoles(TRUE);
    if (in_array('buyer', $userRoles) || $user->isAnonymous())  {
      $build['cp_core_generate_contact'] = [
        '#type' => 'html_tag',
        '#tag' => 'a',
        '#value' => t('Generate contact'),
        '#attributes' => [
          'class' => ['generate-contact-button', 'button', 'btn'],
          'href' => '#',
          // 'onclick' => 'alert("hola");createOrOpenChat(' . $entity->getOwnerId() . ');return false;',
          'onclick' => 'createChat(' . $entity->getOwnerId() . ');return false;',
        ],
      ];
    }
  }


}

/**
 * Implements hook_views_data().
 */
function cp_core_views_data() {
  $data = [];
  $data['node']['cp_core_product_availability_on_off'] = [
    'title' => t('CP Core: Change the product availability'),
    'help' => 'Enables a toggle field for the product availability.',
    'field' => [
      'id' => 'cp_core_product_availability_on_off',
    ],
  ];
  $data['node']['cp_core_company_published_on_off'] = [
    'title' => t('CP Core: Change the company published status'),
    'help' => 'Enables a toggle field for the company published.',
    'field' => [
      'id' => 'cp_core_company_published_on_off',
    ],
  ];
  $data['node']['cp_core_products_changed_between'] = [
    'title' => t('CP Core: Start and End date'),
    'filter' => [
      'title' => t('CP Core: Start and End date'),
      'field' => 'nid',
      'id' => 'cp_core_products_changed_between',
    ],
  ];
  return $data;
}

/**
 * Implements hook_cron().
 */
function cp_core_cron() {
  // Send notification mail.
  $state = \Drupal::state();
  $config = \Drupal::config('cp_core.notifications');
  $now = time();
  $last_execution = $state->get('cp_core_daily_activity_mail_last_execution', 0);
  $last_execution = 0;
  $hour_execution = $config->get('daily_activity_mail_hour');
  $hour_execution = date('H');
  if ((($now - $last_execution) >= 86400) && date('H') == $hour_execution) {
    // Initialization.
    $mailHelper = \Drupal::service('cp_core.mail_helper');
    $database = \Drupal::database();
    $entity_type_manager = \Drupal::entityTypeManager();
    $userStorage = $entity_type_manager->getStorage('user');

    // Set execution time.
    $state->set('cp_core_daily_activity_mail_last_execution', $now);

    // Get all activated assesors.
    $asesors = $userStorage->getQuery()
      ->condition('roles', 'asesor_comercial')
      ->condition('status', TRUE)
      ->execute();

    // Changed companies must be an rendered <ul> list.
    $changed_companies = [];
    // Changed companies must be an rendered <ul> list.
    $company_list_opportunity = [];
    // Changed companies must be an rendered <ul> list.
    $company_list_achievement = [];
    foreach ($asesors as $assesor_id) {
      $assesor = $userStorage->load($assesor_id);
      $company_list_approval = cp_core_get_company_proccesed_list(cp_core_get_company_list_approval($assesor_id));
      $company_list_opportunity = cp_core_get_company_proccesed_list(cp_core_get_company_list_opportunity($assesor_id));
      $company_list_achievement = cp_core_get_company_proccesed_list(cp_core_get_company_list_achievement($assesor_id));
      $custom_replacements = [
        '{{ company_list_approval }}' => $company_list_approval,
        '{{ company_list_opportunity }}' => $company_list_opportunity,
        '{{ company_list_achievement }}' => $company_list_achievement,
      ];
      $key = 'daily_activity_mail';
      $to = $assesor->getEmail();
      $from = NULL;
      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $params = [];
      $mailHelper->send($key, $to, $from, $langcode, $params, $custom_replacements);
    }
  }
}

/**
 * Function to get cp_core_get_company_list_approval().
 */
function cp_core_get_company_list_approval($assesor_id) {
  $items = [];
  // INICIO - Escribir en el siguiente apartado el código necesario para obtener
  // la lista de elementos.

  $userStorage = \Drupal::entityTypeManager()->getStorage('user');
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  $allCompanies = $userStorage->loadByProperties([
    'status' => TRUE,
    'field_company_adviser' => $assesor_id,
  ]);

  foreach ($allCompanies as $company) {
    $nodes = $nodeStorage->loadByProperties([
      'status' => TRUE,
      'field_states' => 'waiting',
    ]);
    if (!empty($nodes)) {
      $items[$company->id()] = $company->label();
    }
  }

  $waitingTerm = $termStorage->loadByProperties(['vid' => 'account_status', 'uuid' => 'a094975e-af73-495c-afa0-34751481d5a3']);
  if (!empty($waitingTerm)) {
    $companies = $userStorage->loadByProperties([
      'status' => TRUE,
      'field_company_adviser' => $assesor_id,
      'field_account_status' => reset($waitingTerm)->id(),
    ]);
    foreach ($companies as $company) {
      $items[$company->id()] = $company->label();
    }
  }

  // FIN
  return $items;
}

/**
 * Function to get cp_core_get_company_list_approval().
 */
function cp_core_get_company_list_opportunity($assesor_id) {
  $items = [];
  // INICIO - Escribir en el siguiente apartado el código necesario para obtener
  // la lista de elementos.


  // FIN
  return $items;
}

/**
 * Function to get cp_core_get_company_list_approval().
 */
function cp_core_get_company_list_achievement($assesor_id) {
  $items = [];
  // INICIO - Escribir en el siguiente apartado el código necesario para obtener
  // la lista de elementos.


  // FIN
  return $items;
}

function cp_core_get_company_proccesed_list($items) {
  if (!empty($items)) {
    $items = implode("\r\n", $items) . "\r\n";
  }
  else {
    $items = t('No information.') . "\r\n";
  }
  return $items;
}
