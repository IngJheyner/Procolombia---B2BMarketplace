<?php

use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityForm;
use Drupal\views\ViewExecutable;
use Twig\Node\Expression\Test\NullTest;
use Drupal\Core\Form\FormStateInterface;
use Drupal\cp_advisor_moderation\Entity\Product;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;

function cp_advisor_moderation_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['product'])) {
    $bundles['node']['product']['class'] = Product::class;
  }
}

function cp_advisor_moderation_form_node_product_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();
  $userRoles = $user->getRoles(TRUE);
  if (in_array('asesor_comercial', $userRoles)) {
    if(\Drupal::currentUser()->hasPermission('cp_advisor_moderation dashboard')){
      $form_object = $form_state->getFormObject();
      if ($form_object instanceof EntityForm) {
        
        $bundle = $form_object->getEntity()->bundle();
        if($bundle === 'product') {
          $form['field_categorization']['widget']['#ajax'] = [
            'event' => 'change',
            'callback' => 'formSelectCallback',
            'wrapper' => 'field-cat-parent',
          ];
          $options = $form['field_categorization']['#options'];
          $options['All'] = t('- Category -');
          // Get all terms lvl 1 Categorization taxonomy.
          $ancestors = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term")->loadTree(
          // This is your taxonomy term vocabulary (machine name).
            'categorization',
          // This is "tid" of parent. Set "0" to get all.
            0,
          // Get only 1st level.
            1,
          // Get full load of taxonomy term entity.
            FALSE
          );
          // Get all tids for ancestors.
          $list_tids_ancestors = [];
          foreach ($ancestors as $term) {
            $list_tids_ancestors[] = (int) $term->tid;
          }
          // Clean options.
          $items_removed = [];
          foreach ($options as $index => $option) {
            $attributes = ['class' => 'first'];
            $opt = $option->option;
            if (isset($opt) && count($opt) > 0) {
              foreach ($opt as $tid => $term) {
                if (!in_array($tid, $list_tids_ancestors)) {
                  // Remove term in otions list.
                  $items_removed[] = $options[$index];
                  unset($options[$index]);
                }
              }
            }
          }
          $form['field_categorization']['widget']['#options'] = $options;
          kint($ancestors);
          kint($options);
          $form['field_categorization_parent']['#prefix'] = '<div id="field-cat-parent">';
          $form['field_categorization_parent']['#suffix'] = '</div>';
          $form['actions']['reject'] = array(
            '#type' => 'submit',
            '#value' => t('Rejects'),
            '#access' => TRUE,
            '#submit' => array('reject_product'),
            '#weight' => -11,
            '#attributes' =>['class'=>['d-none']]
          );
  
          $form['actions']['btn_modal_reject']=[
            '#type' => 'html_tag',
            '#tag'  => 'button',
            '#value' => t('Rejects'),
            '#attributes' => [
              'class' => ['btn'],
              'type' =>['button'],
              'data-bs-toggle' => ['modal'],
              'data-bs-target'=> ['#modal-reject']
              ],
          ];
  
          $form['actions']['modal_reject'] = [
            '#theme' => 'confirmation_modal',
            '#title' => t('Reject'),
            '#message' => t('You are about to reject the edition of the selected product or service.'),
            '#idModal' =>  'modal-reject'
          ];
  
          $form['actions']['approve'] = array(
            '#type' => 'submit',
            '#value' => t('Approve'),
            '#access' => TRUE,
            '#submit' => array('approve_product'),
            '#weight' => -10,
            '#attributes' =>['class'=>['d-none']]
          );
          $form['actions']['btn_modal_approve']=[
            '#type' => 'html_tag',
            '#tag'  => 'button',
            '#value' => t('Approve'),
            '#attributes' => [
              'class' => ['btn'],
              'type' =>['button'],
              'data-bs-toggle' => ['modal'],
              'data-bs-target'=> ['#modal-approve']
              ],
            ];
  
          $form['actions']['modal_approve'] = [
              '#theme' => 'confirmation_modal',
              '#title' => 'Approve',
              '#message' => t('You are about to approve the edition of the selected product or service'),
              '#idModal' =>  'modal-approve'
          ];
          $form['#attached']['library'][] = 'cp_advisor_moderation/cp_advisor_moderation';
  
        }
      }
    }
  }
}

function formSelectCallback(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  $form['field_categorization_parent']['widget']['#options'] = [
    '' => t('All'),
  ];

  $response->addCommand(new ReplaceCommand('#field-cat-parent', $form['field_categorization_parent']));

  // $response->addCommand(new ReplaceCommand('#field-day', $form['day']));

  return $response;
}

function cp_advisor_moderation_theme($existing, $type, $theme, $path) {
  return [
    'confirmation_modal' => [
      'variables' => [
        'title' => NULL,
        'message' => NULL,
        'idModal' => Null,
      ],
      'template' => 'confirmation_modal',
    ],
    'cp_advisor_moderation_export' => [
      'variables' => [
        'url' => NULL,
        'description' => NULL,
      ],
    ]
  ];
}

function cp_advisor_moderation_entity_type_build(array &$entity_types) {
  $entity_types['node']->setFormClass('advisor_moderation', 'Drupal\node\NodeForm');
}



function approve_product(&$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm) {
    $node = $form_object->getEntity();
    $node->field_states->value = 'approved';
    $node->save();
    $url = Url::fromRoute('cp_advisor_moderation.edit_form', ['node'=>$node->id()]);
    $form_state->setRedirectUrl($url);
  }
  \Drupal::messenger()->addMessage(t('approved product or service'), 'status', TRUE);

   //Notification
   $owner = User::load($node->getOwnerID());
   $custom_replacements = ['{{ product_name }}' => $node->getTitle()];
   $key = 'product_seller_approbation_mail';
   $to = $owner->getEmail();
   $from = NULL;
   $langcode = $owner->getPreferredLangcode();
   $params = [];
   \Drupal::service('cp_core.mail_helper')->send($key, $to, $from, $langcode, $params, $custom_replacements);
}

function reject_product(&$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm) {

    //change sate
    $node = $form_object->getEntity();
    $node->field_states->value = 'incomp_info';
    $node->save();
    //Redirect
    $url = Url::fromRoute('cp_advisor_moderation.edit_form', ['node'=>$node->id()]);
    $form_state->setRedirectUrl($url);
    \Drupal::messenger()->addMessage(t('rejected product or service'), 'status', TRUE);


    //Notification
    $owner = User::load($node->getOwnerID());
    $custom_replacements = ['{{ product_name }}' => $node->getTitle()];
    $key = 'product_seller_reject_mail';
    $to = $owner->getEmail();
    $from = NULL;
    $langcode = $owner->getPreferredLangcode();
    $params = [];
    \Drupal::service('cp_core.mail_helper')->send($key, $to, $from, $langcode, $params, $custom_replacements);
  }
}




function cp_advisor_moderation_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  if (($view->id() == 'dashboard_advisor')) {

      //Crear un servicio LocationService
      $terms = Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('locations', 0, 1, FALSE);
      $options = array();

      foreach($terms AS $term) {
        /*if($parent === 0 AND !$full) {
          if(!empty($term->parents[0] === '0')) {
            $options[$term->tid] = $term->name;
          }
        } else {*/
        $options[$term->tid] = $term->name;
        /*}*/
      }
      $form['field_company_deparment_target_id']['#options'] = $options;
      $form['field_company_deparment_target_id']['#options']["All"] = t('Any');
    }

}

/**
 * Implements hook_preprocess_views_view().
 */
function cp_advisor_moderation_preprocess_views_view(&$vars) {
  $vars['#cache']['contexts'][] = 'route';
  /*if (isset($vars['view_array']['#name']) && $vars['view_array']['#name'] == 'dashboard_advisor') {
    $vars['#attached']['library'][] = 'cp_advisor_moderation/cp_advisor_moderation';
    $vars['#attached']['library'][] = 'core/drupal.dialog.ajax';
    $vars['#attached']['library'][] = 'views_data_export/views_data_export';
  }*/
}
