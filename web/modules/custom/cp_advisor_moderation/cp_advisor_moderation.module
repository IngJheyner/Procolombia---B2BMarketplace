<?php

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityForm;
use Drupal\views\ViewExecutable;
use Twig\Node\Expression\Test\NullTest;
use Drupal\Core\Form\FormStateInterface;
use Drupal\cp_advisor_moderation\Entity\Product;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\UserInterface;
use Drupal\Component\Serialization\Json;

function cp_advisor_moderation_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['product'])) {
    $bundles['node']['product']['class'] = Product::class;
  }
}

function cp_advisor_moderation_form_node_product_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();
  $userRoles = $user->getRoles(TRUE);
  if (in_array('asesor_comercial', $userRoles)) {
    if(\Drupal::currentUser()->hasPermission('cp_advisor_moderation dashboard')){
      $form_object = $form_state->getFormObject();
      if ($form_object instanceof EntityForm) {
        $node = $form_object->getEntity();
        $bundle = $form_object->getEntity()->bundle();
        if($bundle === 'product') {
          $form['#tree'] = TRUE;
          $form['field_file_certifications']['widget']['#title'] = t('Certifications');
          $form['field_body']['widget'][0]['value']['#description'] = t('Please include a summary description of the product/service with its main characteristics and/or attributes.');
          $form['title']['widget'][0]['value']['#attributes']['maxlength'] = 100;
          $form['field_categorization']['widget']['#ajax'] = [
            'event' => 'change',
            'callback' => 'formSelectCallback',
            'wrapper' => 'field-cat-parent',
          ];
          $options = $form['field_categorization']['widget']['#options'];
          $options['All'] = t('- Category -');
          // Get all parent taxonomy term.
          $ancestors = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term")->loadTree(
            'categorization',
            0,
            1,
            FALSE
          );
          $list_tids_ancestors = [];
          foreach ($ancestors as $term) {
            $list_tids_ancestors[$term->tid] = $term->name;
          }
          // kint($form);

          // kint($form['field_pr_type_certifications']);
          $file_certifications = $form['field_file_certifications']['widget'];
          foreach($file_certifications as $key => $value) {
            if (is_int($key)) {
              $form['field_file_certifications']['widget'][$key]['#description_field'] = FALSE;
            }
          }
          $form['field_categorization']['widget']['#options'] = $list_tids_ancestors;
          $values = $form_state->getValues();
          $category = $form['field_categorization']['widget']['#default_value'][0];
          $form['field_categorization_parent']['widget']['#options'] = cp_advisor_get_parent_children($category);
          $form['field_categorization_parent']['widget']['#attributes']['id'] = ['categorization-parent-wrapper'];
          $form['field_categorization_parent']['#prefix'] = '<div id="field-cat-parent">';
          $form['field_categorization_parent']['#suffix'] = '</div>';
          $form['field_categorization_parent']['widget']['#chosen'] = FALSE;
          $form['field_pr_type_certifications']['#prefix'] = '<div id="field-certification-type">';
          $form['field_pr_type_certifications']['#suffix'] = '</div>';
          $form['field_pr_type_certifications']['widget']['#chosen'] = FALSE;
          // $form['field_pr_target_market']['#prefix'] = '<div id="field-target-market">';
          // $form['field_pr_target_market']['#suffix'] = '</div>';
          $form['advanced']['#attributes']['class'][] = 'visually-hidden';
          $form['advanced']['#wrapper_attributes']['class'][] = 'visually-hidden';

          foreach ($form as &$item) {
            if (is_array($item) && isset($item['#group']) && $item['#group'] == 'advanced') {
              $item['#access'] = FALSE;
            }
          }
          $form['body_class']['#access'] = FALSE;

          $pruduct_status = \Drupal::request()->query->get('product-status');
          if ($pruduct_status) {
            $state = t('The product has been successfully approved.');
            if ($pruduct_status == 3) {
              $state = t('The product has been successfully rejected.');
            }
            $form['modal_product_saved'] = [
              '#theme' => 'cp_core_node_multistep_generic_modal',
              '#class' => 'save-product-correct-modal',
              '#autoload' => TRUE,
              '#title' => t('Successful process'),
              '#message' => $state,
              '#question' => t('Do you wish to continue?'),
              '#button_text' => t('No'),
              '#button_link' => '/dashboard-advisor/products/' . $node->getOwnerId(),
              '#button_no_text' => t('Yes'),
              '#button_no_link' => '#',
            ];
          }
          else {
            $form['edit_advise_modal'] = [
              '#theme' => 'cp_core_node_multistep_generic_modal',
              '#class' => 'edit-advise-modal',
              '#autoload' => TRUE,
              '#title' => t('Edit product or service'),
              '#message' => t('You are about to edit the information of the product/service of the company <strong>"@company"</strong>', ['@company' => $node->getOwner()->label()]),
              '#question' => t('Do you wish to continue?'),
              '#button_text' => t('No'),
              '#button_link' => '/dashboard-advisor/products/' . $node->getOwnerId(),
              '#button_no_text' => t('Yes'),
              '#button_no_link' => '#',
            ];
          }

          $form['actions']['reject'] = array(
            '#type' => 'submit',
            '#value' => t('Reject'),
            '#access' => TRUE,
            '#submit' => array('reject_product'),
            '#weight' => -11,
            '#attributes' =>['class'=>['d-none']]
          );

          $form['actions']['btn_modal_reject']=[
            '#type' => 'html_tag',
            '#tag'  => 'button',
            '#value' => t('Reject'),
            '#attributes' => [
              'class' => ['btn'],
              'type' =>['button'],
              'data-bs-toggle' => ['modal'],
              'data-bs-target'=> ['#modal-reject']
              ],
          ];

          $form['actions']['modal_reject'] = [
            '#theme' => 'confirmation_modal',
            '#title' => t('Reject'),
            '#message' => t('You are about to reject the edition of the selected product or service.'),
            '#idModal' =>  'modal-reject'
          ];

          $form['actions']['approve'] = array(
            '#type' => 'submit',
            '#value' => t('Approve'),
            '#access' => TRUE,
            '#submit' => array('approve_product'),
            '#weight' => -10,
            '#attributes' =>['class'=>['d-none']]
          );
          $form['actions']['btn_modal_approve']=[
            '#type' => 'html_tag',
            '#tag'  => 'button',
            '#value' => t('Approve'),
            '#attributes' => [
              'class' => ['btn'],
              'type' =>['button'],
              'data-bs-toggle' => ['modal'],
              'data-bs-target'=> ['#modal-approve']
              ],
            ];

          $form['actions']['modal_approve'] = [
              '#theme' => 'confirmation_modal',
              '#title' => 'Approve',
              '#message' => t('You are about to approve the edition of the selected product or service'),
              '#idModal' =>  'modal-approve'
          ];
          $form['#attached']['library'][] = 'cp_advisor_moderation/cp_advisor_moderation';
          $form['actions']['submit']['#submit'][] = 'cp_advisor_node_edit_redirect_submit';
          foreach (array_keys($form['actions']) as $action) {
          }
          // $form['actions']['cp_core_presave_preview'] = [
          //   '#type' => 'link',
          //   '#url' => Url::fromRoute('view.product_service_presave_preview.page_1', ['arg_0' => $node->id()]),
          //   '#title' => t('Preview'),
          //   '#weight' => 5,
          //   '#attributes' => [
          //     'class' => ['use-ajax'],
          //     'data-dialog-type' => 'modal',
          //     'data-dialog-options' => Json::encode(['width' => '90%']),
          //   ],
          //   '#attached' => ['library' => 'core/drupal.dialog.ajax'],
          // ];
          unset($form['actions']['preview']);
          // kint($form);
        }
      }
    }
  }
}

function formSelectCallback(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $values = $form_state->getValues();
  $field_categorizaction = implode(',',$values['field_categorization'][0]);

  $form['field_categorization_parent']['widget']['#attributes']['id'] = ['categorization-parent-wrapper'];
  $form['field_categorization_parent']['widget']['#prefix'] = '<div id="field-cat-parent">';
  $form['field_categorization_parent']['widget']['#suffix'] = '</div>';
  $form['field_categorization_parent']['widget']['#chosen'] = FALSE;
  $form['field_categorization_parent']['widget']['#options'] = cp_advisor_get_parent_children($field_categorizaction);

  $form['field_pr_type_certifications']['widget']['#prefix'] = '<div id="field-certification-type">';
  $form['field_pr_type_certifications']['widget']['#suffix'] = '</div>';
  $form['field_pr_type_certifications']['widget']['#chosen'] = FALSE;
  $form['field_pr_type_certifications']['widget']['#options'] = cp_advisor_get_certification_type_filter($field_categorizaction);

  // $form['field_pr_target_market']['widget']['#prefix'] = '<div id="field-target-market">';
  // $form['field_pr_target_market']['widget']['#suffix'] = '</div>';
  // $field_pr_target_market = $form['field_pr_target_market']['widget'];// field-certification-type
  // foreach($field_pr_target_market as $key => $value) {
  //   if (is_int($key)) {
  //     $form['field_pr_target_market']['widget'][$key]['target_id']['#selection_handler'] = 'views';
  //     $form['field_pr_target_market']['widget'][$key]['target_id']['#selection_settings'] = [
  //       'view' => [
  //         'view_name' => 'cp_core_parent_categories',
  //         'display_name' => 'target_market_filter',
  //         'arguments' => [$field_categorizaction],
  //       ],
  //       'match_operator' => 'CONTAINS',
  //       'match_limit' => 10,
  //     ];
  //   }
  // }
  $response->addCommand(new ReplaceCommand('#field-cat-parent', $form['field_categorization_parent']['widget']));
  $response->addCommand(new ReplaceCommand('#field-certification-type', $form['field_pr_type_certifications']['widget']));
  // $response->addCommand(new ReplaceCommand('#field-target-market', $form['field_pr_target_market']['widget']));

  return $response;
}

function cp_advisor_get_parent_children($parent_tid) {
  $vid = 'categorization';
  $depth = 1; // 1 to get only immediate children, NULL to load entire tree
  $load_entities = FALSE; // True will return loaded entities rather than ids
  $child_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $parent_tid, $depth, $load_entities);
  foreach ($child_terms as $child_term) {
    $children_options[$child_term->tid] = $child_term->name;
  }
  return $children_options;
}

function cp_advisor_get_certification_type_filter($parent_tid) {
  $database = \Drupal::database();
  //get logged user id
  $uid = \Drupal::currentUser()->id();
  $query = $database->select('taxonomy_term_field_data', 'c');
  $query->join('taxonomy_term__field_ct_category', 'cat', 'cat.entity_id = c.tid');
  $query->fields('c', ['tid', 'name']);
  $query->fields('cat', ['field_ct_category_target_id']);
  $query->condition('c.vid', 'certification_types');
  $query->condition('cat.field_ct_category_target_id', $parent_tid);
  $result = $query->execute()->fetchAll();
  foreach($result as $key => $term) {
    $certification_type_filter[$term->tid] = $term->name;
  }
  return $certification_type_filter;
}

/**
 * Implements hook_form_submit().
 */
function cp_advisor_node_edit_redirect_submit(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $ownerId = $node->getOwnerId();
  $options = ['query' => ['product-saved' => 1]];
  $url = Url::fromRoute('view.products_advisor.dashboard_table_product', ['arg_0' => $ownerId], $options);
  $form_state->setRedirectUrl($url);
}

function cp_advisor_moderation_theme($existing, $type, $theme, $path) {
  return [
    'confirmation_modal' => [
      'variables' => [
        'title' => NULL,
        'message' => NULL,
        'idModal' => Null,
      ],
      'template' => 'confirmation_modal',
    ],
    'cp_advisor_moderation_export' => [
      'variables' => [
        'url' => NULL,
        'description' => NULL,
      ],
    ]
  ];
}

function cp_advisor_moderation_entity_type_build(array &$entity_types) {
  $entity_types['node']->setFormClass('advisor_moderation', 'Drupal\node\NodeForm');
}

function approve_product(&$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
      ->loadByProperties(['name' => 'Aprobado', 'vid' => 'account_status']);
    $term = reset($term);
    $term_id = $term->id();

    $node = $form_object->getEntity();
    $node->field_pr_status->target_id = $term_id;
    // $node->field_states->value = 'approved';
    $node->save();
    $options = ['query' => ['product-status' => 2]];
    $url = Url::fromRoute('cp_advisor_moderation.edit_form', ['node'=>$node->id()], $options);
    $form_state->setRedirectUrl($url);
  }
  \Drupal::messenger()->addMessage(t('approved product or service'), 'status', TRUE);

   //Notification
   $owner = User::load($node->getOwnerID());
   $custom_replacements = ['{{ product_name }}' => $node->label()];
   $key = 'product_seller_approbation_mail';
   $to = $owner->getEmail();
   $from = NULL;
   $langcode = $owner->getPreferredLangcode();
   $params = [];
   \Drupal::service('cp_core.mail_helper')->send($key, $to, $from, $langcode, $params, $custom_replacements);
}

function reject_product(&$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm) {
    /*$database = \Drupal::database();
    $query = $database->select('taxonomy_term_field_data', 'c');
      $query->fields('c', ['tid', 'name']);
      $query->condition('c.vid', 'account_status');
      $query->condition('c.name', 'Aprobado');
      $result = $query->execute()->fetchAll();
    kint($result);*/

    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
      ->loadByProperties(['name' => 'Rechazado', 'vid' => 'account_status']);
    $term = reset($term);
    $term_id = $term->id();

    //change sate
    $node = $form_object->getEntity();
    $node->field_pr_status->target_id = $term_id;
    // $node->field_states->value = 'incomp_info';
    $node->save();
    //Redirect
    $options = ['query' => ['product-status' => 3]];
    $url = Url::fromRoute('cp_advisor_moderation.edit_form', ['node'=>$node->id()], $options);
    $form_state->setRedirectUrl($url);
    \Drupal::messenger()->addMessage(t('rejected product or service'), 'status', TRUE);


    //Notification
    $owner = User::load($node->getOwnerID());
    $custom_replacements = ['{{ product_name }}' => $node->label()];
    $key = 'product_seller_reject_mail';
    $to = $owner->getEmail();
    $from = NULL;
    $langcode = $owner->getPreferredLangcode();
    $params = [];
    \Drupal::service('cp_core.mail_helper')->send($key, $to, $from, $langcode, $params, $custom_replacements);
  }
}

function cp_advisor_moderation_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  if (($view->id() == 'dashboard_advisor')) {
      //Crear un servicio LocationService
      $terms = Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('locations', 0, 1, FALSE);
      $options = array();

      foreach($terms AS $term) {
        $options[$term->tid] = $term->name;
      }
      $form['field_company_deparment_target_id']['#options'] = $options;
      $form['field_company_deparment_target_id']['#options']["All"] = t('Any');
      $form['field_productive_chain_target_id']['#options']["All"] = t('Any');
      $form['field_account_status_target_id']['#options']["All"] = t('Any');
      $form['status_1']['#options']["All"] = t('Any');
      $form['field_company_adviser_target_id_entityreference_filter']['#options']["All"] = t('Any');
    }
  if ($view->id() == 'products_advisor') {
    $form['prefix_title'] = [
      '#markup' => '<h1 class"product-list-title">' . t('Products / Services') . '</h1>',
      '#weight' => -99,
    ];

    $form['litepicker']['#attributes']['placeholder'] = t('DD/MM/AA');

    if (\Drupal::request()->query->get('product-saved')) {
      $userStorage = \Drupal::entityTypeManager()->getStorage('user');
      $user = $userStorage->load($view->args[0]);
      $form['modal_product_saved'] = [
        '#theme' => 'cp_core_node_multistep_generic_modal',
        '#class' => 'save-product-correct-modal',
        '#autoload' => TRUE,
        '#title' => t('Successful process'),
        '#message' => t('All changes to the company <strong>"@company"</strong> have been saved and updated (this translation).', ['@company' => $user->label()]),
        '#button_text' => t('I got it'),
      ];

    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function cp_advisor_moderation_user_presave(UserInterface $entity) {
  if (!$entity->isNew()) {
    $original = $entity->original;
    if (\Drupal::currentUser()->id() == $entity->field_company_adviser->target_id) {
      $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
      $approvedTerms = $termStorage->loadByProperties(['vid' => 'account_status', 'uuid' => '7b4ba6ee-ca04-4072-9e70-c2d5106f59e4']);
      $rejectedTerms = $termStorage->loadByProperties(['vid' => 'account_status', 'uuid' => '0db5395e-4e6f-4d9d-8945-6f5b1748d577']);
      $mailHelper = \Drupal::service('cp_core.mail_helper');
      if ($original->field_account_status->target_id != $entity->field_account_status->target_id) {
        if (!empty($approvedTerms)) {
          $approvedTerm = reset($approvedTerms);
          if ($entity->field_account_status->target_id == $approvedTerm->id()) {
            $custom_replacements = [];
            $key = 'company_seller_approbation_mail';
            $to = $entity->getEmail();
            $from = NULL;
            $langcode = $entity->getPreferredLangcode();
            $params = [];
            $mailHelper->send($key, $to, $from, $langcode, $params, $custom_replacements);
          }
        }
        if (!empty($rejectedTerms)) {
          $rejectedTerm = reset($rejectedTerms);
          if ($entity->field_account_status->target_id == $rejectedTerm->id()) {
            $custom_replacements = [];
            $key = 'company_seller_reject_mail';
            $to = $entity->getEmail();
            $from = NULL;
            $langcode = $entity->getPreferredLangcode();
            $params = [];
            $mailHelper->send($key, $to, $from, $langcode, $params, $custom_replacements);
          }
        }
      }
    }

  }
}
