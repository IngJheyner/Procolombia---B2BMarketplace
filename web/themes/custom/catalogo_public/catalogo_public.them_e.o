<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function catalogo_public_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
}

/**
 * Implements template_preprocess_field().
 */
function catalogo_public_preprocess_field(&$variables, $hook) {
  if ($variables['element']['#entity_type'] == 'node' && $variables['element']['#bundle'] == 'product') {
    if ($variables['element']['#field_name'] == 'field_file' && !empty($variables['items'])) {
      $variables['uri'] = $variables['items'][0]['content']['#file']->getFileUri();
    }
  }

}

/**
 * Implements preprocess image widget.
 *
 * @see https://drupal.stackexchange.com/questions/212480/form-api-image-preview
 */
function catalogo_public_preprocess_image_widget(&$variables) {

  $element = $variables['element'];

  $variables['attributes'] = [
    'class' =>
    ['image-widget', 'js-form-managed-file', 'form-managed-file', 'clearfix'],
  ];

  if (!empty($element['fids']['#value'])) {
    $file = reset($element['#files']);
    $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
    $file_variables = [
      'style_name' => $element['#preview_image_style'],
      'uri' => $file->getFileUri(),
    ];

    // Determine image dimensions.
    if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
      $file_variables['width'] = $element['#value']['width'];
      $file_variables['height'] = $element['#value']['height'];
    }
    else {
      $image = \Drupal::service('image.factory')->get($file->getFileUri());
      if ($image->isValid()) {
        $file_variables['width'] = $image->getWidth();
        $file_variables['height'] = $image->getHeight();
      }
      else {
        $file_variables['width'] = $file_variables['height'] = NULL;
      }
    }

    $element['preview'] = [
      '#weight' => -10,
      '#theme' => 'image_style',
      '#width' => $file_variables['width'],
      '#height' => $file_variables['height'],
      '#style_name' => $file_variables['style_name'],
      '#uri' => $file_variables['uri'],
    ];

    // Store the dimensions in the form so the file doesn't have to be
    // accessed again. This is important for remote files.
    $element['width'] = [
      '#type' => 'hidden',
      '#value' => $file_variables['width'],
    ];
    $element['height'] = [
      '#type' => 'hidden',
      '#value' => $file_variables['height'],
    ];
  }

  $variables['data'] = [];
  foreach (\Drupal\Core\Render\Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }
}

/**
 * Implements hook_preprocess_html().
 */
function catalogo_public_preprocess_html(&$variables) {
  $path = \Drupal::service('path.current')->getPath();
  $alias = trim(\Drupal::service('path.alias_manager')
    ->getAliasByPath($path), '/');

  $variables['base_path'] = base_path();

  // Body classes for users paths.
  if ($path == '/register/forget-mail' or $path == '/registro/olvido-mail') {
    $variables['attributes']['class'][] = 'page-reset-pass';
  }
  if ($path == '/register/recover-pass' or $path == '/registro/recuperar-contrasena') {
    $variables['attributes']['class'][] = 'page-reset-pass';
  }
  if ($path == '/register/user' or $path == '/registro/usuario') {
    $variables['attributes']['class'][] = 'page-user-register';
  }
  if ($path == '/register/buyer' or $path == '/registro/comprador') {
    $variables['attributes']['class'][] = 'page-buyer-register';
  }

  // Add body class for admin role user
  $rolesCurrentUsr = \Drupal::currentUser()->getRoles();
  if (in_array('administrator', $rolesCurrentUsr)) {
    $variables['attributes']['class'][] = 'user-loggin-admin';
  }

}


/**
 * catalogo_public_preprocess_container
 * @param  [type] &$variables [description]
 * @return [type]             [description]
 */
function catalogo_public_preprocess_container(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $type = $node->getType();
    if (!empty($type) && $type == 'company') {
      if (isset($variables['attributes']) && !empty($variables['attributes'])) {
        $attributes = (array) $variables['attributes'];
        $keys = array_keys($attributes);
        if (in_array('data-drupal-views-infinite-scroll-content-wrapper', $keys)) {
          $variables['view_infinite_scroll'] = TRUE;
        }
      }
    }
  }
}

