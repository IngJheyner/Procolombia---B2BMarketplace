{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}


{%
    set classes = [
    'component',
    'component__' ~ paragraph.bundle|clean_class
]
%}

{# Container by default. #}
{% set add_container = true %}

{# Width. #}
{% if content.field_c_width|render %}
    {% set c_width = content.field_c_width['#items'].getString() %}
    {% if c_width == 'edge2edge' %}
        {% set add_container = false %}
    {% endif %}
{% endif %}

{# Sets Unique ID for paragraph from Paragraph ID. #}
{% set paragraph_id = 'component-' ~ paragraph.id.value %}

{# Sets paragraph title for paragraph. #}
{% set paragraph_title = content.field_c_title|render %}

{# Sets paragraph title status for paragraph. #}
{% set paragraph_title_status = true %}
{% if 'On' in content.field_c_title_status[0] %}
    {% set paragraph_title_status = false %}
{% endif %}

{# Add custom paragraph CSS class(es). #}
{%  set c_clasess = content.field_c_classes|render %}
{% if c_clasess %}
    {% set striped_custom_classes = c_clasess|striptags|lower %}
    {% set split_custom_classes = striped_custom_classes|split(' ') %}
    {% for custom_class in split_custom_classes %}
        {% set clened_custom_class = [ custom_class|clean_class ] %}
        {% set classes = classes|merge(clened_custom_class) %}
    {%  endfor %}
{% endif %}

<section{{ attributes.addClass(classes).setAttribute('id', paragraph_id) }} {% if content.field_image_bg|render %} style="background-image:url({{- file_url(content.field_image_bg['#items'].entity.uri.value)  -}}); background-repeat:no-repeat;" {% endif %}>
    {% if paragraph_title and paragraph_title_status %}
        <div class="component__heading">
            <div class="container">
                <h2 class="component__title">{{- paragraph_title -}}</h2>
            </div>
        </div>
    {% endif %}
    <div class="component__content">
      {% if add_container %}
          <div class="container">
            <div class="row">
      {% endif %}
              {{ content|without('field_c_title', 'field_c_title_status', 'field_image_bg', 'field_c_width', 'field_c_classes') }}
      {% if add_container %}
          </div>
        </div>
      {% endif %}
    </div>
</section>
